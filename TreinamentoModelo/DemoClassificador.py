"""
Script para demonstrar o uso do modelo treinado de classifica√ß√£o de sentimentos
Execute ap√≥s o treinamento do modelo estar completo
"""

from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline
import os

from ClassificadorSentimentos import ClassificadorSentimentos
# Exemplo de uso
def run_demo():
    """
    Demonstra como usar a classe ClassificadorSentimentos
    """
    print("üöÄ Exemplo de uso do Classificador de Sentimentos\n")
    
    # Criar inst√¢ncia do classificador
    classificador = ClassificadorSentimentos()
    
    if not classificador.esta_carregado():
        print("‚ùå Modelo n√£o p√¥de ser carregado. Execute o treinamento primeiro.")
        return
    
    # Textos de exemplo
    textos_exemplo = [
        "Adorei este produto! √â exatamente o que eu esperava.",
        "Terr√≠vel! N√£o funciona e o atendimento √© p√©ssimo.",
        "O produto √© ok, nada demais mas serve para o que preciso.",
        "Fant√°stico! Recomendo para todos os meus amigos.",
        "N√£o gostei, mas tamb√©m n√£o foi t√£o ruim assim."
    ]
    
    print("üìä Classificando textos de exemplo:\n")
    
    for i, texto in enumerate(textos_exemplo, 1):
        resultado = classificador.classificar(texto)
        
        if "erro" in resultado:
            print(f"‚ùå Erro: {resultado['erro']}")
            continue
        
        print(f"Texto {i}: {texto}")
        print(f"Sentimento: {resultado['sentimento']}")
        print(f"Confian√ßa: {resultado['confianca']}%")
        print("-" * 60)

if __name__ == "__main__":
    run_demo()
